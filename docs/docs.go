// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import (
	"modbus-emulator/conf"

	"github.com/swaggo/swag"
)

const docTemplate = `{
  "swagger": "2.0",
  "info": {
    "description": "HTTP API for utility management",
    "title": "HTTP-server for \"Modbus emulator\"",
    "version": "1.1.0"
  },
  "basePath": "/modbus-emulator",
  "schemes": [
    "http"
  ],
  "paths": {
    "/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "description": "Get list of settings for all working servers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "server_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "If parameter == nil -> response contains data about all servers"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServersData"
              }
            }
          }
        }
      }
    },
    "/settings/emulation_mode": {
      "post": {
        "tags": [
          "Settings"
        ],
        "description": "Update \"one-time emulation mode\" parameter for all working servers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "one-time",
            "in": "query",
            "required": true,
            "description": "Must be \"true\" or \"false\"",
            "type": "boolean"
          },
          {
            "name": "server_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "If parameter == nil -> flag will be set for all servers"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServersData"
              }
            }
          }
        }
      }
    },
    "/time/actual": {
      "get": {
        "tags": [
          "Time"
        ],
        "description": "Get actual time of emulation",
        "produces": [
          "applicaion/json"
        ],
        "parameters": [
          {
            "name": "server_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "If parameter == nil -> response consist of data for all servers"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActualTime"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Server": {
      "type": "object",
      "properties": {
        "is_working": {
          "type": "boolean"
        },
        "dump_socket": {
          "type": "string"
        },
        "real_socket": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "one_time_emulation": {
          "type": "boolean"
        },
        "start_time": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "current_time": {
          "type": "string"
        }
      }
    },
    "ServersData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "settings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Server"
          }
        }
      }
    },
    "ActualTime": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "actual_time": {
          "type": "string"
        }
      }
    }
  }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1.0",
	Host:             conf.ServerHTTPServesocket,
	BasePath:         "/modbus-emulator",
	Schemes:          []string{},
	Title:            "HTTP-server for \"Modbus emulator\"",
	Description:      "HTTP API for utility management",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
